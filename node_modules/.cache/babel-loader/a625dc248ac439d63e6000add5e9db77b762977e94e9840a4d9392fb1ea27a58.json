{"ast":null,"code":"import _objectSpread from \"C:/Users/lucas/Desktop/CONCORDIA/QUARCC/LAB/QuarccAI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { TAG_NAMES as $, NS, hasUnescapedText } from '../common/html.js';\nimport { escapeText, escapeAttribute } from 'entities/lib/escape.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\n// Sets\nconst VOID_ELEMENTS = new Set([$.AREA, $.BASE, $.BASEFONT, $.BGSOUND, $.BR, $.COL, $.EMBED, $.FRAME, $.HR, $.IMG, $.INPUT, $.KEYGEN, $.LINK, $.META, $.PARAM, $.SOURCE, $.TRACK, $.WBR]);\nfunction isVoidElement(node, options) {\n  return options.treeAdapter.isElementNode(node) && options.treeAdapter.getNamespaceURI(node) === NS.HTML && VOID_ELEMENTS.has(options.treeAdapter.getTagName(node));\n}\nconst defaultOpts = {\n  treeAdapter: defaultTreeAdapter,\n  scriptingEnabled: true\n};\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serialize(node, options) {\n  const opts = _objectSpread(_objectSpread({}, defaultOpts), options);\n  if (isVoidElement(node, opts)) {\n    return '';\n  }\n  return serializeChildNodes(node, opts);\n}\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const str = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serializeOuter(node, options) {\n  const opts = _objectSpread(_objectSpread({}, defaultOpts), options);\n  return serializeNode(node, opts);\n}\nfunction serializeChildNodes(parentNode, options) {\n  let html = '';\n  // Get container of the child nodes\n  const container = options.treeAdapter.isElementNode(parentNode) && options.treeAdapter.getTagName(parentNode) === $.TEMPLATE && options.treeAdapter.getNamespaceURI(parentNode) === NS.HTML ? options.treeAdapter.getTemplateContent(parentNode) : parentNode;\n  const childNodes = options.treeAdapter.getChildNodes(container);\n  if (childNodes) {\n    for (const currentNode of childNodes) {\n      html += serializeNode(currentNode, options);\n    }\n  }\n  return html;\n}\nfunction serializeNode(node, options) {\n  if (options.treeAdapter.isElementNode(node)) {\n    return serializeElement(node, options);\n  }\n  if (options.treeAdapter.isTextNode(node)) {\n    return serializeTextNode(node, options);\n  }\n  if (options.treeAdapter.isCommentNode(node)) {\n    return serializeCommentNode(node, options);\n  }\n  if (options.treeAdapter.isDocumentTypeNode(node)) {\n    return serializeDocumentTypeNode(node, options);\n  }\n  // Return an empty string for unknown nodes\n  return '';\n}\nfunction serializeElement(node, options) {\n  const tn = options.treeAdapter.getTagName(node);\n  return \"<\".concat(tn).concat(serializeAttributes(node, options), \">\").concat(isVoidElement(node, options) ? '' : \"\".concat(serializeChildNodes(node, options), \"</\").concat(tn, \">\"));\n}\nfunction serializeAttributes(node, _ref) {\n  let {\n    treeAdapter\n  } = _ref;\n  let html = '';\n  for (const attr of treeAdapter.getAttrList(node)) {\n    html += ' ';\n    if (attr.namespace) {\n      switch (attr.namespace) {\n        case NS.XML:\n          {\n            html += \"xml:\".concat(attr.name);\n            break;\n          }\n        case NS.XMLNS:\n          {\n            if (attr.name !== 'xmlns') {\n              html += 'xmlns:';\n            }\n            html += attr.name;\n            break;\n          }\n        case NS.XLINK:\n          {\n            html += \"xlink:\".concat(attr.name);\n            break;\n          }\n        default:\n          {\n            html += \"\".concat(attr.prefix, \":\").concat(attr.name);\n          }\n      }\n    } else {\n      html += attr.name;\n    }\n    html += \"=\\\"\".concat(escapeAttribute(attr.value), \"\\\"\");\n  }\n  return html;\n}\nfunction serializeTextNode(node, options) {\n  const {\n    treeAdapter\n  } = options;\n  const content = treeAdapter.getTextNodeContent(node);\n  const parent = treeAdapter.getParentNode(node);\n  const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n  return parentTn && treeAdapter.getNamespaceURI(parent) === NS.HTML && hasUnescapedText(parentTn, options.scriptingEnabled) ? content : escapeText(content);\n}\nfunction serializeCommentNode(node, _ref2) {\n  let {\n    treeAdapter\n  } = _ref2;\n  return \"<!--\".concat(treeAdapter.getCommentNodeContent(node), \"-->\");\n}\nfunction serializeDocumentTypeNode(node, _ref3) {\n  let {\n    treeAdapter\n  } = _ref3;\n  return \"<!DOCTYPE \".concat(treeAdapter.getDocumentTypeNodeName(node), \">\");\n}","map":{"version":3,"names":["TAG_NAMES","$","NS","hasUnescapedText","escapeText","escapeAttribute","defaultTreeAdapter","VOID_ELEMENTS","Set","AREA","BASE","BASEFONT","BGSOUND","BR","COL","EMBED","FRAME","HR","IMG","INPUT","KEYGEN","LINK","META","PARAM","SOURCE","TRACK","WBR","isVoidElement","node","options","treeAdapter","isElementNode","getNamespaceURI","HTML","has","getTagName","defaultOpts","scriptingEnabled","serialize","opts","_objectSpread","serializeChildNodes","serializeOuter","serializeNode","parentNode","html","container","TEMPLATE","getTemplateContent","childNodes","getChildNodes","currentNode","serializeElement","isTextNode","serializeTextNode","isCommentNode","serializeCommentNode","isDocumentTypeNode","serializeDocumentTypeNode","tn","concat","serializeAttributes","_ref","attr","getAttrList","namespace","XML","name","XMLNS","XLINK","prefix","value","content","getTextNodeContent","parent","getParentNode","parentTn","_ref2","getCommentNodeContent","_ref3","getDocumentTypeNodeName"],"sources":["C:/Users/lucas/Desktop/CONCORDIA/QUARCC/LAB/QuarccAI/node_modules/hast-util-raw/node_modules/parse5/dist/serializer/index.js"],"sourcesContent":["import { TAG_NAMES as $, NS, hasUnescapedText } from '../common/html.js';\nimport { escapeText, escapeAttribute } from 'entities/lib/escape.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\n// Sets\nconst VOID_ELEMENTS = new Set([\n    $.AREA,\n    $.BASE,\n    $.BASEFONT,\n    $.BGSOUND,\n    $.BR,\n    $.COL,\n    $.EMBED,\n    $.FRAME,\n    $.HR,\n    $.IMG,\n    $.INPUT,\n    $.KEYGEN,\n    $.LINK,\n    $.META,\n    $.PARAM,\n    $.SOURCE,\n    $.TRACK,\n    $.WBR,\n]);\nfunction isVoidElement(node, options) {\n    return (options.treeAdapter.isElementNode(node) &&\n        options.treeAdapter.getNamespaceURI(node) === NS.HTML &&\n        VOID_ELEMENTS.has(options.treeAdapter.getTagName(node)));\n}\nconst defaultOpts = { treeAdapter: defaultTreeAdapter, scriptingEnabled: true };\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serialize(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    if (isVoidElement(node, opts)) {\n        return '';\n    }\n    return serializeChildNodes(node, opts);\n}\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const str = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serializeOuter(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    return serializeNode(node, opts);\n}\nfunction serializeChildNodes(parentNode, options) {\n    let html = '';\n    // Get container of the child nodes\n    const container = options.treeAdapter.isElementNode(parentNode) &&\n        options.treeAdapter.getTagName(parentNode) === $.TEMPLATE &&\n        options.treeAdapter.getNamespaceURI(parentNode) === NS.HTML\n        ? options.treeAdapter.getTemplateContent(parentNode)\n        : parentNode;\n    const childNodes = options.treeAdapter.getChildNodes(container);\n    if (childNodes) {\n        for (const currentNode of childNodes) {\n            html += serializeNode(currentNode, options);\n        }\n    }\n    return html;\n}\nfunction serializeNode(node, options) {\n    if (options.treeAdapter.isElementNode(node)) {\n        return serializeElement(node, options);\n    }\n    if (options.treeAdapter.isTextNode(node)) {\n        return serializeTextNode(node, options);\n    }\n    if (options.treeAdapter.isCommentNode(node)) {\n        return serializeCommentNode(node, options);\n    }\n    if (options.treeAdapter.isDocumentTypeNode(node)) {\n        return serializeDocumentTypeNode(node, options);\n    }\n    // Return an empty string for unknown nodes\n    return '';\n}\nfunction serializeElement(node, options) {\n    const tn = options.treeAdapter.getTagName(node);\n    return `<${tn}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? '' : `${serializeChildNodes(node, options)}</${tn}>`}`;\n}\nfunction serializeAttributes(node, { treeAdapter }) {\n    let html = '';\n    for (const attr of treeAdapter.getAttrList(node)) {\n        html += ' ';\n        if (attr.namespace) {\n            switch (attr.namespace) {\n                case NS.XML: {\n                    html += `xml:${attr.name}`;\n                    break;\n                }\n                case NS.XMLNS: {\n                    if (attr.name !== 'xmlns') {\n                        html += 'xmlns:';\n                    }\n                    html += attr.name;\n                    break;\n                }\n                case NS.XLINK: {\n                    html += `xlink:${attr.name}`;\n                    break;\n                }\n                default: {\n                    html += `${attr.prefix}:${attr.name}`;\n                }\n            }\n        }\n        else {\n            html += attr.name;\n        }\n        html += `=\"${escapeAttribute(attr.value)}\"`;\n    }\n    return html;\n}\nfunction serializeTextNode(node, options) {\n    const { treeAdapter } = options;\n    const content = treeAdapter.getTextNodeContent(node);\n    const parent = treeAdapter.getParentNode(node);\n    const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n    return parentTn &&\n        treeAdapter.getNamespaceURI(parent) === NS.HTML &&\n        hasUnescapedText(parentTn, options.scriptingEnabled)\n        ? content\n        : escapeText(content);\n}\nfunction serializeCommentNode(node, { treeAdapter }) {\n    return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;\n}\nfunction serializeDocumentTypeNode(node, { treeAdapter }) {\n    return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}